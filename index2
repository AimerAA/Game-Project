<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Online Puanlı Tic-Tac-Toe (Sohbetli)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .grid-container {
            display: grid;
            grid-template-columns: repeat(10, 1fr);
            grid-template-rows: repeat(10, 1fr);
            width: 90vmin;
            height: 90vmin;
            max-width: 500px;
            max-height: 500px;
            border: 2px solid #374151; /* gray-700 */
        }
        .cell {
            border: 1px solid #4b5563; /* gray-600 */
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: clamp(1rem, 3.5vmin, 1.5rem);
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.2s;
            background-color: #374151; /* gray-700 */
        }
        .cell:not(.marked):hover {
            background-color: #4b5563; /* gray-600 */
        }
        .cell.marked.X { color: #34d399; /* emerald-400 */ }
        .cell.marked.O { color: #fb923c; /* orange-400 */ }
        .cell.marked.T { color: #38bdf8; /* sky-400 */ }
        
        .cell.scored-X { background-color: rgba(52, 211, 153, 0.3); }
        .cell.scored-O { background-color: rgba(251, 146, 60, 0.3); }
        .cell.scored-T { background-color: rgba(56, 189, 248, 0.3); }
        
        @keyframes glow {
            0%, 100% { box-shadow: 0 0 5px #f59e0b; }
            50% { box-shadow: 0 0 20px #f59e0b, 0 0 30px #f59e0b; }
        }
        .glowing {
            animation: glow 2.5s infinite;
        }
        #chat-window::-webkit-scrollbar { width: 8px; }
        #chat-window::-webkit-scrollbar-track { background: #1f2937; }
        #chat-window::-webkit-scrollbar-thumb { background: #4b5563; border-radius: 4px;}
    </style>
</head>
<body class="bg-gray-900 text-white flex flex-col items-center justify-center min-h-screen p-4">

    <main id="main-content" class="text-center bg-gray-800 p-6 rounded-2xl shadow-2xl w-full max-w-6xl">
        <!-- Lobi Ekranı -->
        <div id="lobby-screen">
            <h1 class="text-4xl sm:text-5xl font-bold mb-4 text-cyan-400">XOT</h1>
            
            <div class="mb-4">
                 <input type="text" id="player-name-input" placeholder="Adını Gir" class="bg-gray-700 text-white w-full p-3 rounded-lg border-2 border-gray-600 focus:outline-none focus:border-cyan-500 mb-4" maxlength="15">
            </div>

            <div class="mb-4">
                <label class="text-gray-400 mb-2 block">Oyuncu Sayısı:</label>
                <div class="flex justify-center gap-4" id="player-count-selector">
                    <label class="flex-1 flex items-center justify-center space-x-2 p-3 bg-gray-700 rounded-lg cursor-pointer border-2 border-transparent has-[:checked]:border-cyan-500 has-[:checked]:bg-gray-600 transition">
                        <input type="radio" name="playerCount" value="2" class="hidden">
                        <span>2 Kişilik</span>
                    </label>
                    <label class="flex-1 flex items-center justify-center space-x-2 p-3 bg-gray-700 rounded-lg cursor-pointer border-2 border-transparent has-[:checked]:border-cyan-500 has-[:checked]:bg-gray-600 transition">
                        <input type="radio" name="playerCount" value="3" checked class="hidden">
                        <span>3 Kişilik</span>
                    </label>
                </div>
            </div>

            <div class="mb-4">
                <button id="create-game-btn" class="w-full bg-cyan-600 hover:bg-cyan-700 text-white font-bold py-3 px-4 rounded-lg transition">Yeni Oyun Kur</button>
            </div>
            
            <div class="flex items-center space-x-2">
                <input type="text" id="game-id-input" placeholder="Oyun ID'si Gir" class="bg-gray-700 text-white w-full p-3 rounded-lg border-2 border-gray-600 focus:outline-none focus:border-cyan-500">
                <button id="join-game-btn" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-3 px-4 rounded-lg transition">Oyuna Katıl</button>
            </div>
            <p id="lobby-error" class="text-red-500 mt-4 min-h-[20px]"></p>
        </div>

        <!-- Oyun Ekranı -->
        <div id="game-screen" class="hidden">
             <div class="flex flex-col lg:flex-row gap-8">
                <!-- Oyun Alanı -->
                <div class="flex-grow">
                    <div id="player-panels-container" class="grid grid-cols-1 sm:grid-cols-3 gap-4 justify-between items-center mb-4">
                         <div id="playerX" class="p-3 rounded-lg border-2 border-transparent">
                            <h2 class="text-xl font-bold">Oyuncu X (Kurucu)</h2>
                            <p class="text-3xl font-bold text-emerald-400" id="scoreX">0</p>
                        </div>
                        <div id="playerO" class="p-3 rounded-lg border-2 border-transparent">
                            <h2 class="text-xl font-bold">Oyuncu O (Bekleniyor)</h2>
                            <p class="text-3xl font-bold text-orange-400" id="scoreO">0</p>
                        </div>
                         <div id="playerT" class="p-3 rounded-lg border-2 border-transparent">
                            <h2 class="text-xl font-bold">Oyuncu T (Bekleniyor)</h2>
                            <p class="text-3xl font-bold text-sky-400" id="scoreT">0</p>
                        </div>
                    </div>

                    <p id="status" class="mb-4 text-gray-300 text-xl min-h-[28px]">Sıradaki Oyuncu: <span class="font-bold text-white">X</span></p>

                    <div class="flex justify-center">
                        <div id="grid" class="grid-container"></div>
                    </div>
                    
                     <div class="mt-4 text-center">
                        <p class="text-sm text-gray-400">Oyun ID: <strong id="game-id-display" class="cursor-pointer" title="Kopyalamak için tıkla"></strong></p>
                        <p class="text-sm text-gray-400">Kullanıcı ID: <span id="user-id-display"></span></p>
                        <button id="reset-game-btn" class="mt-2 bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition">Oyunu Sıfırla (Sadece Kurucu)</button>
                    </div>
                </div>

                <!-- Sohbet Paneli -->
                <div class="w-full lg:w-80 flex flex-col bg-gray-900 rounded-lg p-4 h-96 lg:h-[650px]">
                    <h2 class="text-2xl font-bold mb-4 text-cyan-400 border-b border-gray-700 pb-2">Sohbet</h2>
                    <div id="chat-window" class="flex-grow overflow-y-auto mb-4 pr-2"></div>
                    <div class="flex gap-2">
                        <input type="text" id="chat-input" placeholder="Mesajını yaz..." class="bg-gray-700 text-white w-full p-2 rounded-lg border-2 border-gray-600 focus:outline-none focus:border-cyan-500">
                        <button id="send-chat-btn" class="bg-cyan-600 hover:bg-cyan-700 text-white font-bold py-2 px-4 rounded-lg transition">Gönder</button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Firebase SDK -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getFirestore, doc, getDoc, setDoc, onSnapshot, updateDoc, collection, addDoc, query, orderBy, serverTimestamp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { getAuth, signInAnonymously, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";

        const GRID_SIZE = 10;
        const WINNING_SCORE = 10;
        
        const lobbyScreen = document.getElementById('lobby-screen');
        const gameScreen = document.getElementById('game-screen');
        const createGameBtn = document.getElementById('create-game-btn');
        const joinGameBtn = document.getElementById('join-game-btn');
        const gameIdInput = document.getElementById('game-id-input');
        const playerNameInput = document.getElementById('player-name-input');
        const lobbyError = document.getElementById('lobby-error');
        const grid = document.getElementById('grid');
        const statusDisplay = document.getElementById('status');
        const playerPanelsContainer = document.getElementById('player-panels-container');
        const scoreXDisplay = document.getElementById('scoreX');
        const scoreODisplay = document.getElementById('scoreO');
        const scoreTDisplay = document.getElementById('scoreT');
        const gameIdDisplay = document.getElementById('game-id-display');
        const userIdDisplay = document.getElementById('user-id-display');
        const playerXDisplay = document.getElementById('playerX');
        const playerODisplay = document.getElementById('playerO');
        const playerTDisplay = document.getElementById('playerT');
        const resetGameBtn = document.getElementById('reset-game-btn');
        const chatWindow = document.getElementById('chat-window');
        const chatInput = document.getElementById('chat-input');
        const sendChatBtn = document.getElementById('send-chat-btn');

        let db, auth;
        let currentUserId = null;
        let currentGameId = null;
        let unsubscribeGame = null;
        let unsubscribeChat = null;
        let localGameState = {};

        const userFirebaseConfig = {
            apiKey: "AIzaSyCWA_xnhSncne3azMqA2L3W-llrszPg5k0",
            authDomain: "puanli-tictactoe-oyunum.firebaseapp.com",
            projectId: "puanli-tictactoe-oyunum",
            storageBucket: "puanli-tictactoe-oyunum.firebasestorage.app",
            messagingSenderId: "350467018447",
            appId: "1:350467018447:web:00e89d1be6ff3c87eab1ba",
            measurementId: "G-G3FGGFTEY8"
        };
        
        const app = initializeApp(userFirebaseConfig);
        db = getFirestore(app);
        auth = getAuth(app);
        
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const gameCollectionPath = `artifacts/${appId}/public/data/games`;

        onAuthStateChanged(auth, user => { if (user) currentUserId = user.uid; });
        async function signInUser() { if (!auth.currentUser) await signInAnonymously(auth); }
        
        createGameBtn.addEventListener('click', async () => {
            await signInUser();
            const playerName = playerNameInput.value.trim();
            if (!playerName) { lobbyError.textContent = "Lütfen bir ad girin."; return; }

            const playerCount = parseInt(document.querySelector('input[name="playerCount"]:checked').value);
            const newGameId = Math.random().toString(36).substring(2, 8).toUpperCase();
            const gameRef = doc(db, gameCollectionPath, newGameId);

            const newGameState = {
                board: Array(GRID_SIZE * GRID_SIZE).fill(null),
                scoredCells: Array(GRID_SIZE * GRID_SIZE).fill(null),
                playerCount: playerCount,
                scores: playerCount === 2 ? { X: 0, O: 0 } : { X: 0, O: 0, T: 0 },
                currentPlayer: 'X',
                players: {
                    X: { uid: currentUserId, name: playerName },
                    O: null,
                    ...(playerCount === 3 && { T: null })
                },
                winner: null,
                gameActive: true,
                createdAt: serverTimestamp()
            };
            await setDoc(gameRef, newGameState);
            joinGame(newGameId);
        });

        joinGameBtn.addEventListener('click', async () => {
            await signInUser();
            const playerName = playerNameInput.value.trim();
            if (!playerName) { lobbyError.textContent = "Lütfen bir ad girin."; return; }
            
            const gameId = gameIdInput.value.trim().toUpperCase();
            if (!gameId) { lobbyError.textContent = "Lütfen bir Oyun ID'si girin."; return; }
            
            const gameRef = doc(db, gameCollectionPath, gameId);
            const gameSnap = await getDoc(gameRef);
            if (!gameSnap.exists()) { lobbyError.textContent = "Bu ID ile oyun bulunamadı."; return; }
            
            const gameData = gameSnap.data();
            const isAlreadyInGame = Object.values(gameData.players).some(p => p && p.uid === currentUserId);
            if (isAlreadyInGame) { joinGame(gameId); return; }

            if (gameData.playerCount === 2 && gameData.players.O) { lobbyError.textContent = "Bu 2 kişilik oyun dolu."; return; }
            if (gameData.playerCount === 3 && gameData.players.T) { lobbyError.textContent = "Bu 3 kişilik oyun dolu."; return; }

            const newPlayer = { uid: currentUserId, name: playerName };
            if (!gameData.players.O) { await updateDoc(gameRef, { "players.O": newPlayer }); } 
            else if (gameData.playerCount === 3 && !gameData.players.T) { await updateDoc(gameRef, { "players.T": newPlayer }); } 
            
            joinGame(gameId);
        });
        
        function joinGame(gameId) {
            currentGameId = gameId;
            lobbyScreen.classList.add('hidden');
            gameScreen.classList.remove('hidden');
            gameIdDisplay.textContent = gameId;
            userIdDisplay.textContent = currentUserId.substring(0, 8);

            if (unsubscribeGame) unsubscribeGame();
            if (unsubscribeChat) unsubscribeChat();

            const gameRef = doc(db, gameCollectionPath, currentGameId);
            unsubscribeGame = onSnapshot(gameRef, (doc) => {
                if (doc.exists()) {
                    localGameState = doc.data();
                    renderGame(localGameState);
                } else {
                    gameScreen.classList.add('hidden');
                    lobbyScreen.classList.remove('hidden');
                }
            });

            const messagesRef = collection(db, gameCollectionPath, currentGameId, 'messages');
            const q = query(messagesRef, orderBy("timestamp"));
            unsubscribeChat = onSnapshot(q, (snapshot) => {
                chatWindow.innerHTML = '';
                snapshot.forEach(doc => renderMessage(doc.data()));
                chatWindow.scrollTop = chatWindow.scrollHeight;
            });
        }
        
        function renderMessage(data) {
            const messageDiv = document.createElement('div');
            const senderSpan = document.createElement('span');
            const textP = document.createElement('p');
            const isMine = data.senderId === currentUserId;
            
            messageDiv.classList.add('p-2', 'rounded-lg', 'mb-2', 'max-w-[85%]');
            senderSpan.classList.add('font-bold', 'text-sm', 'mr-2');
            textP.classList.add('break-words', 'inline');

            const playerColors = { X: 'text-emerald-400', O: 'text-orange-400', T: 'text-sky-400' };
            senderSpan.textContent = `${data.senderName || data.senderSymbol}:`;
            senderSpan.className += ` ${playerColors[data.senderSymbol]}`;
            textP.textContent = data.text;

            if (isMine) {
                messageDiv.classList.add('bg-cyan-800', 'self-end', 'ml-auto');
                messageDiv.append(textP);
            } else {
                messageDiv.classList.add('bg-gray-700', 'self-start', 'mr-auto');
                messageDiv.append(senderSpan, textP);
            }
            chatWindow.appendChild(messageDiv);
        }

        async function sendMessage() {
            const text = chatInput.value.trim();
            if (text === '') return;
            let mySymbol, myName;
            for (const [symbol, player] of Object.entries(localGameState.players)) {
                if (player && player.uid === currentUserId) {
                    [mySymbol, myName] = [symbol, player.name];
                    break;
                }
            }
            if (!mySymbol) return;
            const messagesRef = collection(db, gameCollectionPath, currentGameId, 'messages');
            await addDoc(messagesRef, { text, senderId: currentUserId, senderSymbol: mySymbol, senderName: myName, timestamp: serverTimestamp() });
            chatInput.value = '';
        }

        sendChatBtn.addEventListener('click', sendMessage);
        chatInput.addEventListener('keydown', (e) => { if (e.key === 'Enter') { e.preventDefault(); sendMessage(); } });

        function renderGame(state) {
            scoreXDisplay.textContent = state.scores.X || 0;
            scoreODisplay.textContent = state.scores.O || 0;
            if(state.playerCount === 3) scoreTDisplay.textContent = state.scores.T || 0;

            playerXDisplay.querySelector('h2').textContent = state.players.X ? `${state.players.X.name} (X)` : 'Oyuncu X (Kurucu)';
            playerODisplay.querySelector('h2').textContent = state.players.O ? `${state.players.O.name} (O)` : 'Oyuncu O (Bekleniyor)';
            if (state.playerCount === 3) {
                playerTDisplay.querySelector('h2').textContent = state.players.T ? `${state.players.T.name} (T)` : 'Oyuncu T (Bekleniyor)';
            }
            
            if (state.playerCount === 2) {
                playerTDisplay.style.display = 'none';
                playerPanelsContainer.classList.remove('sm:grid-cols-3');
                playerPanelsContainer.classList.add('sm:grid-cols-2');
            } else {
                playerTDisplay.style.display = 'block';
                playerPanelsContainer.classList.remove('sm:grid-cols-2');
                playerPanelsContainer.classList.add('sm:grid-cols-3');
            }

            [playerXDisplay, playerODisplay, playerTDisplay].forEach(el => { el.classList.remove('glowing'); el.style.borderColor = 'transparent'; });
            const playerColors = { X: 'text-emerald-400', O: 'text-orange-400', T: 'text-sky-400' };
            const playerBorderColors = { X: '#34d399', O: '#fb923c', T: '#38bdf8' };

            if (state.winner) {
                statusDisplay.innerHTML = `Oyunu <span class="font-bold ${playerColors[state.winner]}">${state.winner}</span> kazandı! Yeni tur başlıyor...`;
                const winnerDisplay = state.winner === 'X' ? playerXDisplay : (state.winner === 'O' ? playerODisplay : playerTDisplay);
                winnerDisplay.classList.add('glowing');
            } else if (!state.gameActive) {
                statusDisplay.textContent = "Oyun bitti!";
            } else {
                 statusDisplay.innerHTML = `Sıradaki Oyuncu: <span class="font-bold ${playerColors[state.currentPlayer]}">${state.currentPlayer}</span>`;
                 const currentPlayerDisplay = state.currentPlayer === 'X' ? playerXDisplay : (state.currentPlayer === 'O' ? playerODisplay : playerTDisplay);
                 currentPlayerDisplay.style.borderColor = playerBorderColors[state.currentPlayer];
            }
            
            resetGameBtn.disabled = state.players.X?.uid !== currentUserId;
            resetGameBtn.classList.toggle('opacity-50', state.players.X?.uid !== currentUserId);
            resetGameBtn.classList.toggle('cursor-not-allowed', state.players.X?.uid !== currentUserId);

            grid.innerHTML = '';
            state.board.forEach((value, i) => {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                if (value) { cell.textContent = value; cell.classList.add('marked', value); }
                if (state.scoredCells[i]) { cell.classList.add(`scored-${state.scoredCells[i]}`); }
                cell.dataset.index = i;
                cell.addEventListener('click', handleCellClick);
                grid.appendChild(cell);
            });
        }
        
        async function handleCellClick(e) {
            const index = parseInt(e.target.dataset.index);
            if (!localGameState.gameActive || localGameState.winner || localGameState.board[index]) return;
            
            let myRole;
            for (const [role, player] of Object.entries(localGameState.players)) {
                if (player && player.uid === currentUserId) { myRole = role; break; }
            }
            if (localGameState.currentPlayer !== myRole) return;
            
            const allPlayersJoined = localGameState.playerCount === 2 ? localGameState.players.O : localGameState.players.O && localGameState.players.T;
            if (!allPlayersJoined) { statusDisplay.textContent = "Tüm oyuncular bekleniyor..."; return; }

            const newBoard = [...localGameState.board];
            newBoard[index] = localGameState.currentPlayer;
            const { newScores, scoredIndices } = checkForNewScores(newBoard, localGameState.scoredCells, localGameState.currentPlayer, index);
            const updatedScores = { ...localGameState.scores };
            updatedScores[localGameState.currentPlayer] += newScores;
            const updatedScoredCells = [...localGameState.scoredCells];
            scoredIndices.forEach(idx => updatedScoredCells[idx] = localGameState.currentPlayer);

            let nextPlayer = localGameState.currentPlayer;
            if (newScores === 0) {
                if (localGameState.playerCount === 2) {
                    nextPlayer = localGameState.currentPlayer === 'X' ? 'O' : 'X';
                } else {
                    if (localGameState.currentPlayer === 'X') nextPlayer = 'O';
                    else if (localGameState.currentPlayer === 'O') nextPlayer = 'T';
                    else nextPlayer = 'X';
                }
            }
            
            let winner = null;
            if (updatedScores.X >= WINNING_SCORE) winner = 'X';
            else if (updatedScores.O >= WINNING_SCORE) winner = 'O';
            else if (localGameState.playerCount === 3 && updatedScores.T >= WINNING_SCORE) winner = 'T';
            
            await updateDoc(doc(db, gameCollectionPath, currentGameId), { board: newBoard, scores: updatedScores, scoredCells: updatedScoredCells, currentPlayer: nextPlayer, winner: winner, gameActive: winner === null });
            if(winner && localGameState.players.X?.uid === currentUserId) setTimeout(resetGame, 5000);
        }

        function checkForNewScores(board, scoredCells, player, lastMoveIndex) {
            let newScores = 0;
            const scoredIndices = new Set();
            const directions = [ 1, GRID_SIZE, GRID_SIZE + 1, GRID_SIZE - 1 ];
            directions.forEach(dir => {
                for (let i = -2; i <= 0; i++) {
                    const indices = [ lastMoveIndex + (i * dir), lastMoveIndex + ((i + 1) * dir), lastMoveIndex + ((i + 2) * dir) ];
                    if (isValidCombination(indices, dir) && indices.every(idx => board[idx] === player)) {
                        if (indices.filter(idx => scoredCells[idx] !== null).length <= 1) {
                            newScores++;
                            indices.forEach(idx => scoredIndices.add(idx));
                        }
                    }
                }
            });
            return { newScores, scoredIndices: Array.from(scoredIndices) };
        }

        function isValidCombination(indices, direction) {
            if (indices.some(i => i < 0 || i >= GRID_SIZE * GRID_SIZE)) return false;
            const y = i => Math.floor(i / GRID_SIZE), x = i => i % GRID_SIZE;
            if (direction === 1) return y(indices[0]) === y(indices[1]) && y(indices[1]) === y(indices[2]);
            if (direction === GRID_SIZE) return true;
            if (direction === GRID_SIZE + 1) return y(indices[1]) - y(indices[0]) === 1 && y(indices[2]) - y(indices[1]) === 1 && x(indices[1]) - x(indices[0]) === 1 && x(indices[2]) - x(indices[1]) === 1;
            if (direction === GRID_SIZE - 1) return y(indices[1]) - y(indices[0]) === 1 && y(indices[2]) - y(indices[1]) === 1 && x(indices[0]) - x(indices[1]) === 1 && x(indices[1]) - x(indices[2]) === 1;
            return false;
        }

        async function resetGame() {
            if (localGameState.players.X?.uid !== currentUserId) return;
            const resetScores = localGameState.playerCount === 2 ? { X: 0, O: 0 } : { X: 0, O: 0, T: 0 };
            await updateDoc(doc(db, gameCollectionPath, currentGameId), {
                board: Array(GRID_SIZE * GRID_SIZE).fill(null), scoredCells: Array(GRID_SIZE * GRID_SIZE).fill(null),
                scores: resetScores, currentPlayer: 'X', winner: null, gameActive: true,
            });
        }
        
        gameIdDisplay.addEventListener('click', () => {
            // Modern 'navigator.clipboard' API'si güvenlik nedeniyle iframe'lerde 
            // engellenebildiği için daha uyumlu olan bu eski yöntem kullanılır.
            const textArea = document.createElement("textarea");
            textArea.value = currentGameId;
            document.body.appendChild(textArea);
            textArea.select();
            try {
                document.execCommand('copy');
                const originalText = gameIdDisplay.textContent;
                gameIdDisplay.textContent = "Kopyalandı!";
                setTimeout(() => { gameIdDisplay.textContent = originalText; }, 1500);
            } catch (err) {
                console.error('Oyun ID kopyalanamadı', err);
            }
            document.body.removeChild(textArea);
        });
        
        resetGameBtn.addEventListener('click', resetGame);
        
        signInUser();
    </script>
</body>
</html>

